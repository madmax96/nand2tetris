// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address where to write outM
        pc[15];          // address of next instruction

    PARTS:
    /* A-instruction: 0 vvv vvvv vvvv vvvv
     * C- instruction: 1xxa cccc ccdd djjj
     * a- used to determine if operation should operate on A register or M(Memory[A]) register
     * c - bits representing ALU operation
     * d - bits used to determine where to save value calculated by ALU
     * j - bits used to determine what to execute next (jump or not)
    */

    // 1. Decode

    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=InA);

    // instruction[5] is d1 - controlls if we should load output in reg A
    Not(in=instruction[5], out=NotD1);
    Nand(a=instruction[15], b=NotD1, out=loadA);
    // instruction[4] is d2 - controlls if we should load output in reg D
    And(a=instruction[15], b=instruction[4], out=loadD);
    ARegister(in=InA, load=loadA, out=ARegOut,out[0..14]=addressM);
    DRegister(in=ALUOut, load=loadD, out=DRegOut);
    // instruction[3] is d3 - controlls if we shoud write to Memory[A]
    And(a=instruction[15], b=instruction[3], out=writeM);

    // instruction[12] is `a` bit used to determin if ALU should operate on A or Memory[A] values
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=Y);

     // 2. Execute
    ALU(x=DRegOut,
        y=Y,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=ALUOut, out=outM, zr=ALU-ZR, ng=ALU-NG);

    // 3. Fetch
    // code below determines next instruction to execute
    Or(a=ALU-ZR, b=ALU-NG, out=IsZeroOrNeg);
    Not(in=IsZeroOrNeg, out=ALU-POS);

    And(a=instruction[0], b=ALU-POS, out=JMP-POS);
    And(a=instruction[1], b=ALU-ZR, out=JMP-EQ);
    And(a=instruction[2], b=ALU-NG, out=JMP-NG);

    Or8Way(in[0]=JMP-POS,
           in[1]=JMP-EQ,
           in[2]=JMP-NG,
           in[3..7]=false,
           out=ShouldJump);
    And(a=ShouldJump, b=instruction[15], out=loadPC);
    PC(in=ARegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}